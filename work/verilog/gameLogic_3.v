/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module gameLogic_3 (
    input clk,
    input rst,
    input [255:0] currentMap,
    input [3:0] p1ButtonInput,
    input [3:0] p2ButtonInput,
    input [0:0] p1Ready,
    input [0:0] p2Ready,
    input levelButton,
    input [3:0] p1ScoreIn,
    input [3:0] p2ScoreIn,
    output reg [255:0] nextMap,
    output reg [3:0] p1ScoreOut,
    output reg [3:0] p2ScoreOut,
    output reg [0:0] p1Lost,
    output reg [0:0] p2Lost
  );
  
  
  
  wire [1-1:0] M_levelButtonState_count;
  reg [1-1:0] M_levelButtonState_button;
  levelButtonState_5 levelButtonState (
    .clk(clk),
    .rst(rst),
    .button(M_levelButtonState_button),
    .count(M_levelButtonState_count)
  );
  reg M_levelButtonStatePrev_d, M_levelButtonStatePrev_q = 1'h0;
  localparam NOT_PLAYING_playing = 1'd0;
  localparam PLAYING_playing = 1'd1;
  
  reg M_playing_d, M_playing_q = NOT_PLAYING_playing;
  localparam U_p1State = 2'd0;
  localparam D_p1State = 2'd1;
  localparam L_p1State = 2'd2;
  localparam R_p1State = 2'd3;
  
  reg [1:0] M_p1State_d, M_p1State_q = R_p1State;
  localparam U_p2State = 2'd0;
  localparam D_p2State = 2'd1;
  localparam L_p2State = 2'd2;
  localparam R_p2State = 2'd3;
  
  reg [1:0] M_p2State_d, M_p2State_q = U_p2State;
  reg [25:0] M_timeToUpdateMap_d, M_timeToUpdateMap_q = 1'h0;
  reg [3:0] M_p1PositionX_d, M_p1PositionX_q = 1'h0;
  reg [3:0] M_p1PositionY_d, M_p1PositionY_q = 1'h0;
  reg [3:0] M_p2PositionX_d, M_p2PositionX_q = 1'h0;
  reg [3:0] M_p2PositionY_d, M_p2PositionY_q = 1'h0;
  reg [25:0] M_level_d, M_level_q = 26'h2faf080;
  
  always @* begin
    M_playing_d = M_playing_q;
    M_p1State_d = M_p1State_q;
    M_p2State_d = M_p2State_q;
    M_level_d = M_level_q;
    M_p1PositionX_d = M_p1PositionX_q;
    M_p2PositionY_d = M_p2PositionY_q;
    M_p1PositionY_d = M_p1PositionY_q;
    M_levelButtonStatePrev_d = M_levelButtonStatePrev_q;
    M_p2PositionX_d = M_p2PositionX_q;
    M_timeToUpdateMap_d = M_timeToUpdateMap_q;
    
    M_levelButtonState_button = ~levelButton;
    p1ScoreOut = p1ScoreIn;
    p2ScoreOut = p2ScoreIn;
    p1Lost = 1'h0;
    p2Lost = 1'h0;
    M_levelButtonStatePrev_d = M_levelButtonState_count;
    if (M_levelButtonStatePrev_q == 1'h0 && M_levelButtonState_count == 1'h1) begin
      if (M_level_q == 26'h2faf080) begin
        M_level_d = 26'h17d7840;
      end else begin
        if (M_level_q == 26'h17d7840) begin
          M_level_d = 26'h04c4b40;
        end else begin
          if (M_level_q == 26'h04c4b40) begin
            M_level_d = 26'h2faf080;
          end
        end
      end
    end
    if (M_playing_q == NOT_PLAYING_playing) begin
      nextMap = currentMap;
      if (p1Ready == 1'h0 && p2Ready == 1'h0) begin
        M_playing_d = PLAYING_playing;
        nextMap = 256'hffffffffffffffffffffffffffffffffbffdffffffffffffffffffffffffffff;
        M_p1PositionX_d = 4'he;
        M_p1PositionY_d = 4'h7;
        M_p2PositionX_d = 4'h1;
        M_p2PositionY_d = 4'h7;
        M_timeToUpdateMap_d = 26'h0000000;
        M_p1State_d = R_p1State;
        M_p2State_d = L_p2State;
      end
    end else begin
      nextMap = currentMap;
      if (M_timeToUpdateMap_q < M_level_q - 1'h1) begin
        M_timeToUpdateMap_d = M_timeToUpdateMap_q + 1'h1;
        if (p1ButtonInput[3+0-:1] == 1'h0) begin
          M_p1State_d = U_p1State;
        end else begin
          if (p1ButtonInput[2+0-:1] == 1'h0) begin
            M_p1State_d = D_p1State;
          end else begin
            if (p1ButtonInput[1+0-:1] == 1'h0) begin
              M_p1State_d = L_p1State;
            end else begin
              if (p1ButtonInput[0+0-:1] == 1'h0) begin
                M_p1State_d = R_p1State;
              end else begin
                M_p1State_d = M_p1State_q;
              end
            end
          end
        end
        if (p2ButtonInput[3+0-:1] == 1'h0) begin
          M_p2State_d = U_p2State;
        end else begin
          if (p2ButtonInput[2+0-:1] == 1'h0) begin
            M_p2State_d = D_p2State;
          end else begin
            if (p2ButtonInput[1+0-:1] == 1'h0) begin
              M_p2State_d = L_p2State;
            end else begin
              if (p2ButtonInput[0+0-:1] == 1'h0) begin
                M_p2State_d = R_p2State;
              end else begin
                M_p2State_d = M_p2State_q;
              end
            end
          end
        end
      end else begin
        if (M_timeToUpdateMap_q == M_level_q - 1'h1) begin
          M_timeToUpdateMap_d = M_timeToUpdateMap_q + 1'h1;
          
          case (M_p1State_q)
            U_p1State: begin
              M_p1PositionY_d = M_p1PositionY_q + 1'h1;
              if (M_p1PositionY_q == 4'hf) begin
                M_playing_d = NOT_PLAYING_playing;
                p2ScoreOut = p2ScoreIn + 1'h1;
                if (p2ScoreIn == 4'h9) begin
                  p2ScoreOut = 4'h0;
                end
                p1Lost = 1'h1;
              end
            end
            D_p1State: begin
              M_p1PositionY_d = M_p1PositionY_q - 1'h1;
              if (M_p1PositionY_q == 4'hf) begin
                M_playing_d = NOT_PLAYING_playing;
                p2ScoreOut = p2ScoreIn + 1'h1;
                if (p2ScoreIn == 4'h9) begin
                  p2ScoreOut = 4'h0;
                end
                p1Lost = 1'h1;
              end
            end
            L_p1State: begin
              M_p1PositionX_d = M_p1PositionX_q + 1'h1;
              if (M_p1PositionY_q == 4'hf) begin
                M_playing_d = NOT_PLAYING_playing;
                p2ScoreOut = p2ScoreIn + 1'h1;
                if (p2ScoreIn == 4'h9) begin
                  p2ScoreOut = 4'h0;
                end
                p1Lost = 1'h1;
              end
            end
            R_p1State: begin
              M_p1PositionX_d = M_p1PositionX_q - 1'h1;
              if (M_p1PositionY_q == 4'hf) begin
                M_playing_d = NOT_PLAYING_playing;
                p2ScoreOut = p2ScoreIn + 1'h1;
                if (p2ScoreIn == 4'h9) begin
                  p2ScoreOut = 4'h0;
                end
                p1Lost = 1'h1;
              end
            end
          endcase
          
          case (M_p2State_q)
            U_p2State: begin
              M_p2PositionY_d = M_p2PositionY_q + 1'h1;
              if (M_p2PositionY_q == 4'hf) begin
                M_playing_d = NOT_PLAYING_playing;
                p1ScoreOut = p1ScoreIn + 1'h1;
                if (p1ScoreIn == 4'h9) begin
                  p1ScoreOut = 4'h0;
                end
                p2Lost = 1'h1;
              end
            end
            D_p2State: begin
              M_p2PositionY_d = M_p2PositionY_q - 1'h1;
              if (M_p2PositionY_q == 4'hf) begin
                M_playing_d = NOT_PLAYING_playing;
                p1ScoreOut = p1ScoreIn + 1'h1;
                if (p1ScoreIn == 4'h9) begin
                  p1ScoreOut = 4'h0;
                end
                p2Lost = 1'h1;
              end
            end
            L_p2State: begin
              M_p2PositionX_d = M_p2PositionX_q + 1'h1;
              if (M_p2PositionY_q == 4'hf) begin
                M_playing_d = NOT_PLAYING_playing;
                p1ScoreOut = p1ScoreIn + 1'h1;
                if (p1ScoreIn == 4'h9) begin
                  p1ScoreOut = 4'h0;
                end
                p2Lost = 1'h1;
              end
            end
            R_p2State: begin
              M_p2PositionX_d = M_p2PositionX_q - 1'h1;
              if (M_p2PositionY_q == 4'hf) begin
                M_playing_d = NOT_PLAYING_playing;
                p1ScoreOut = p1ScoreIn + 1'h1;
                if (p1ScoreIn == 4'h9) begin
                  p1ScoreOut = 4'h0;
                end
                p2Lost = 1'h1;
              end
            end
          endcase
        end else begin
          M_timeToUpdateMap_d = 26'h0000000;
          nextMap[(M_p1PositionY_q)*16+(M_p1PositionX_q)*1+0-:1] = 1'h0;
          nextMap[(M_p2PositionY_q)*16+(M_p2PositionX_q)*1+0-:1] = 1'h0;
          if (M_p1PositionX_q == M_p2PositionX_q && M_p1PositionY_q == M_p2PositionY_q) begin
            M_playing_d = NOT_PLAYING_playing;
            if (p1ScoreIn == 4'h9) begin
              p1ScoreOut = 4'h0;
            end else begin
              p1ScoreOut = p1ScoreIn + 1'h1;
            end
            if (p2ScoreIn == 4'h9) begin
              p2ScoreOut = 4'h0;
            end else begin
              p2ScoreOut = p2ScoreIn + 1'h1;
            end
            p1Lost = 1'h1;
            p2Lost = 1'h1;
          end else begin
            if (currentMap[(M_p1PositionY_q)*16+(M_p1PositionX_q)*1+0-:1] == 1'h0 && currentMap[(M_p2PositionY_q)*16+(M_p2PositionX_q)*1+0-:1] == 1'h0) begin
              M_playing_d = NOT_PLAYING_playing;
              if (p1ScoreIn == 4'h9) begin
                p1ScoreOut = 4'h0;
              end else begin
                p1ScoreOut = p1ScoreIn + 1'h1;
              end
              if (p2ScoreIn == 4'h9) begin
                p2ScoreOut = 4'h0;
              end else begin
                p2ScoreOut = p2ScoreIn + 1'h1;
              end
              p1Lost = 1'h1;
              p2Lost = 1'h1;
            end else begin
              if (currentMap[(M_p1PositionY_q)*16+(M_p1PositionX_q)*1+0-:1] == 1'h0) begin
                M_playing_d = NOT_PLAYING_playing;
                if (p2ScoreIn == 4'h9) begin
                  p2ScoreOut = 4'h0;
                end else begin
                  p2ScoreOut = p2ScoreIn + 1'h1;
                end
                p1Lost = 1'h1;
              end else begin
                if (currentMap[(M_p2PositionY_q)*16+(M_p2PositionX_q)*1+0-:1] == 1'h0) begin
                  M_playing_d = NOT_PLAYING_playing;
                  if (p1ScoreIn == 4'h9) begin
                    p1ScoreOut = 4'h0;
                  end else begin
                    p1ScoreOut = p1ScoreIn + 1'h1;
                  end
                  p2Lost = 1'h1;
                end
              end
            end
          end
        end
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_p2State_q <= 1'h0;
    end else begin
      M_p2State_q <= M_p2State_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_levelButtonStatePrev_q <= 1'h0;
      M_timeToUpdateMap_q <= 1'h0;
      M_p1PositionX_q <= 1'h0;
      M_p1PositionY_q <= 1'h0;
      M_p2PositionX_q <= 1'h0;
      M_p2PositionY_q <= 1'h0;
      M_level_q <= 26'h2faf080;
    end else begin
      M_levelButtonStatePrev_q <= M_levelButtonStatePrev_d;
      M_timeToUpdateMap_q <= M_timeToUpdateMap_d;
      M_p1PositionX_q <= M_p1PositionX_d;
      M_p1PositionY_q <= M_p1PositionY_d;
      M_p2PositionX_q <= M_p2PositionX_d;
      M_p2PositionY_q <= M_p2PositionY_d;
      M_level_q <= M_level_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_playing_q <= 1'h0;
    end else begin
      M_playing_q <= M_playing_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_p1State_q <= 2'h3;
    end else begin
      M_p1State_q <= M_p1State_d;
    end
  end
  
endmodule
