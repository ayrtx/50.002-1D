module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output inputsToCircuit[8]
  ) {
  
  sig rst;                  // reset signal
  sig pattern[16][16];
  
  .clk(clk) {
    reset_conditioner reset_cond;
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    .rst(rst){
      timechange timechange;

      }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    inputsToCircuit = c{0,0,0,0,0,0,0,0};
    // In the pattern, 0 is lighted, 1 is off
    pattern = {c{0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0},
               c{0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0},
               c{0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0},
               c{0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0},
               c{0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
               c{0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
               c{0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0},
               c{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
               c{0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0},
               c{1,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0},
               c{0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0},
               c{0,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0},
               c{0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0},
               c{1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0},
               c{0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0},
               c{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
    timechange.ledArray = pattern; // display(pattern)
    inputsToCircuit = timechange.inputsToCircuit;
    //latch: 87 inputsToCircuit[7]
    //clock: 84 inputsToCircuit[6]
    //data: 82 inputsToCircuit[5]
    //g: 80 inputsToCircuit[4]
    //a: 78 inputsToCircuit[3]
    //b: 74 inputsToCircuit[2]
    //c: 66 inputsToCircuit[1]
    //d: 57 inputsToCircuit[0]
  }}